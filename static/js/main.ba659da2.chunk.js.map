{"version":3,"sources":["Components/Complete/trophy.svg","Components/Start/code_background.svg","Components/Question/Question.js","Components/Question/index.js","data/actions/actions.js","Components/Answer/index.js","Components/Answers/Answers.js","Components/Answers/index.js","Components/Footer/Footer.js","axios.js","data/actions/api.js","Components/Footer/index.js","Components/Complete/Complete.js","Components/Complete/index.js","Components/Header/Header.js","Components/Header/index.js","Components/Quiz/Quiz.js","Components/Quiz/index.js","Components/Start/Start.js","Components/Start/index.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","data/reducer.js","data/initial.js","data/store.js","index.js"],"names":["module","exports","font_color","color","line_design","borderTop","marginTop","marginBottom","renderer","seconds","milliseconds","completed","Question","question","counter","timesUp","selected","style","className","date","Date","now","onComplete","connect","current","qcounter","dispatch","type","Answer","this","props","handleClick","value","correct","id","timeout","answerSelected","backgroundColor","border","pointerEvents","onClick","Component","Answers","answers","map","answer","key","correctAnswer","selectedAnswer","unselected","Footer","quiz","checker","axios","create","baseURL","params","headers","getQuestion","getState","get","then","data","imageSize","width","height","congrats_box","display","flexDirection","alignItems","padding","textAlign","margin","score_color","fontWeight","Complete","score","src","trophy","alt","header_background_color","Header","category","Quiz","buttonColour","Start","startQuiz","code_background","values","App","start","Boolean","window","location","hostname","match","reducer","state","action","save","incrementScore","find","initial","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba659da2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trophy.d680bb55.svg\";","module.exports = __webpack_public_path__ + \"static/media/code_background.de975ae4.svg\";","import React from \"react\";\nimport Countdown from 'react-countdown-now';\n\n\nconst font_color = {\n    color: '#e5ebeb',\n};\n\nconst line_design = {\n    borderTop: \"1px solid #e5ebeb\",\n    marginTop: \"0px\",\n    marginBottom: \"2em\"\n};\n\nconst renderer = ({ seconds, milliseconds, completed }) => {\n    \n    if (completed) {\n        // Render a completed state\n        return <span>Done!</span>;\n    } else {\n        // Render a countdown\n        return <span>{ seconds }:{ milliseconds }</span>;\n    }\n};\n\nconst Question = ({ question, counter, timesUp, selected }) => (\n\n    // map over the quiz array\n    // Send GET request for first item (eg. question id 1)\n\n    <div style={ font_color } className=\"mt-5 mb-4\">\n        <div className=\"d-flex justify-content-between\">\n            <h5>{ counter }/15</h5>\n            <h5>\n                {\n                    selected ? null :\n                        <Countdown\n                            date={ Date.now() + 10000 }\n                            renderer={ renderer }\n                            onComplete={ timesUp }\n                        />\n                }\n                \n            </h5>\n\n        </div>\n        <hr style={ line_design }></hr>\n        <p>{ question }</p>\n    </div>\n)\n\nexport default Question;","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Question from \"./Question\";\nimport { timesUp } from \"../../data/actions/actions\";\n\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = ({ current, qcounter, selected }) => {\n    return {\n        question: current.question.question, \n        counter: qcounter,\n        selected: selected,\n        \n    }\n};\n\nlet mapDispatchToProps = dispatch => {\n    return {\n        timesUp: () => dispatch(timesUp()),\n    }\n}\n\n \nexport default connect(mapStateToProps, mapDispatchToProps)(Question);","export const save = (question, answers) => {\n    return {\n        type: \"save\",\n        question,\n        answers,\n    };\n };\n\n export const start = values => {\n    return {\n        type: \"start\",\n        values,\n    }\n };\n\n export const incrementScore = () => {\n     return {\n         type: \"incrementScore\"\n     }\n }\n\n export const selectedAnswer = (id) => {\n     return {\n         type: \"selectedAnswer\",\n         id,\n     }\n }\n\nexport const timesUp = () => {\n    return {\n        type: \"timesUp\",\n     }\n }\n\n","import React, { Component } from \"react\";\n\nclass Answer extends Component {\n\n    render() {\n        let { handleClick, value, correct, selected, id, timeout } = this.props;\n        const answerSelected = selected === id;\n        const style = {}\n\n        if (selected === null) {\n            style.backgroundColor = \"#cbdce6\";\n        } else if (answerSelected && correct) {\n            style.backgroundColor = \"#e78230\";\n            style.border = \"4px solid green\";\n        } else if (answerSelected && !correct) {\n            style.border = \"4px solid red\";\n            style.backgroundColor = \"#cbdce6\";\n        } else if (selected > 0 && correct) {\n            style.backgroundColor = \"#e78230\";\n            style.border = \"4px solid green\";\n        } else if (timeout && correct) {\n            style.backgroundColor = \"#e78230\";\n            style.border = \"4px solid green\";\n        } else if (timeout && !correct) {\n            style.border = \"4px solid red\";\n            style.backgroundColor = \"#cbdce6\";\n        } else {\n            style.backgroundColor = \"#cbdce6\";\n        };\n\n        if(selected > 0) { \n            style.pointerEvents = \"none\";\n        }\n\n        return (\n            <button\n                onClick={ handleClick }\n                style={ style }\n                type=\"button\"\n                className=\"btn btn-rounded rounded-pill btn-block btn-lg\">{ value }\n            </button>\n        )\n    }\n}\n\nexport default Answer;","import React from \"react\";\nimport Answer from \"../Answer\";\n\nlet Answers = ({ answers, handleClick, selected, timeout }) => (\n    <div className=\"col-xs-6\">\n        { answers.map((answer) =>\n            <Answer\n                key={ answer.id }\n                id={ answer.id }\n                value={ answer.answer }\n                correct={ answer.correct }\n                handleClick={ () => handleClick(answer.id) }\n                selected={ selected }\n                timeout={ timeout }\n            />\n        ) }\n    </div>\n);\n\nexport default Answers; ","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Answers from \"./Answers\";\nimport { selectedAnswer } from \"../../data/actions/actions\"\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = ({ current, selected, correctAnswer, timeout }) => {\n    return {\n        answers: current.answers,\n        selected: selected,\n        correctAnswer: correctAnswer,\n        timeout: timeout,\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        handleClick: (id) => dispatch(selectedAnswer(id))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import React from \"react\";\n\nconst unselected = {\n    backgroundColor: \"#cbdce6\"\n    }\n\nconst Footer = ({ quiz, qcounter, handleClick, selected, correctAnswer, timeout }) => {\n\n\n    const checker = selected === correctAnswer;\n\n    return (\n     <div className=\"d-flex justify-content-between mb-4 mt-5\">\n       { selected === 0 ? null : <p className={ checker ? \"text-success\" : \"text-danger\" }>{ checker ? \"Genius! Well done!\" : \"Oops! Incorrect\" }</p>}\n        { selected === 0 ? null :\n            <button\n                style={ unselected }\n                type=\"button\"\n                className=\"btn btn-rounded rounded-pill\"\n                onClick={ handleClick }\n                quiz={ quiz }\n                qcounter={ qcounter }\n                // test comment \n            >Next</button>\n        }\n    </div>\n    )\n};\n\nexport default Footer;","// import the library version of axios\nimport axios from \"axios\";\n// create a version of axios with useful defaults\nexport default axios.create({\n    // use your own url\n    baseURL: \"https://quiz.developme.space/api\",\n    // use your own key\n    params: { \"key\": \"bCYb3k8XuKIMOlhNrcPQ880FMg4S3XDvGEdcgcJV\" },\n    // make sure we get JSON back\n    headers: {\"Accept\": \"application/json\"},\n});","import axios from \"../../axios.js\";\nimport { start } from './actions';\nimport { save } from './actions';\n\nexport const startQuiz = () => {\n    return (dispatch) => {\n        axios.get('/questions').then(({ data }) => {\n            // console.log(data.data[0].id);\n            \n            dispatch(getQuestion(data.data[0].id));\n            dispatch(start(data.data));\n        });\n    };\n};\n\nexport const getQuestion = id => {\n    return (dispatch, getState) => {\n        const qcounter = getState().qcounter;\n        const quiz = getState().quiz;\n        axios.get(`/questions/${id ? id : quiz[qcounter].id}`).then(({ data }) => {\n            // console.log(data.question, data.answers);\n            dispatch(save(data.question, data.answers)); // save the response with question and answers to local state\n            // currentQuestion += 1; // NOT HOW YOU'D TO IT, but you'll need some way to increment the value of counter in state, so the next page can request the question id at index[counter] in the Quiz array \n        });\n    };\n};\n","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Footer from \"./Footer\";\nimport { getQuestion } from \"../../data/actions/api\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = ({ selected, timeout, correctAnswer }) => {\n    return {\n        selected: selected,\n        timeout: timeout,\n        correctAnswer: correctAnswer,\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        handleClick: () => dispatch(getQuestion()),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import React from \"react\";\nimport trophy from \"./trophy.svg\"\n\n\nconst imageSize = {\n    width: \"50%\",\n    height: \"30%\",\n    marginBottom: \"1em\",\n    marginTop: \"3em\"\n}\n\nconst congrats_box = {\n    backgroundColor: \"#cbdce6\",\n    height: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: \"15px\",\n    textAlign: \"center\",\n    margin: \"auto\"\n  }\n\nconst score_color = {\n    color: \"#30bd6e\",\n    fontWeight: \"bold\"\n}\n\n\nlet Complete = ( {score, counter} ) => (\n    <>\n        <div style={ congrats_box  } className=\"rounded-lg d-flex\">\n            <img src={ trophy } alt=\"Trophy\" style={ imageSize } />\n            <h4>Congratulations!</h4>\n            <h1 style={ score_color }>{ score }/{ counter }</h1>\n            <h5>Quiz completed successfully</h5>\n            <br></br>\n            \n            <p>You attempted <b>{ counter } questions</b> and answered <span style={ score_color }>{ score } correctly!</span></p>\n\n        </div>\n      \n    </>\n)\n\nexport default Complete;","import { connect } from \"react-redux\";\nimport Complete from \"./Complete\";\n\nlet mapStateToProps = ( {score, qcounter} ) => {\n    return {\n        score,\n        counter: qcounter,\n\n    }\n}\n\nexport default connect(mapStateToProps)(Complete)","import React from 'react';\n\nconst font_color = {\ncolor: '#e5ebeb',\n}\n\nconst header_background_color ={\nbackgroundColor: \"#2d4158\",\nmargin: \"0 -15px\"\n}\n\nconst Header = ( {category} ) => (\n\n    <div style={ header_background_color } className=\"page-header\">\n      <h5 style={ font_color } className=\"card-header\">{ category }</h5>\n    </div>\n);\n\n\nexport default Header;","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Header from \"./Header\";\n\nlet mapStateToProps = ( {current} ) => {\n    return {\n    category: current.question.category,\n  \n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n    }\n};\n \nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from \"react\";\n\nimport Question from \"../Question\";\nimport Answers from \"../Answers\";\nimport Footer from \"../Footer\";\nimport Complete from \"../Complete\";\nimport Header from '../Header';\n//import Complete from \"../Complete/Complete\";\n\n\nlet Quiz = ( {counter} ) => (\n\n    <>\n        { counter >= 15 ? <Complete /> : \n        <> \n            <Header />\n            <Question />\n            <Answers />\n            <Footer /> \n        </>\n        } \n    </>\n)\n\nexport default Quiz;","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Quiz from \"./Quiz\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = ( {qcounter} ) => {\n    return {\n   counter: qcounter,\n    }\n};\n\n \nexport default connect(mapStateToProps)(Quiz);","import React from 'react';\nimport code_background from \"./code_background.svg\"\n\nconst congrats_box = {\n    backgroundColor: \"#cbdce6\",\n    height: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: \"15px\",\n    textAlign: \"center\",\n    margin: \"auto\"\n  }\n\n  const imageSize = {\n    width: \"100%\",\n    height: \"100%\",\n    \n}\nconst buttonColour = {\n    backgroundColor:\"#e78230\",\n    marginBottom: \"10em\",\n}\n\n\nconst Start = ( { startQuiz } ) => (\n\n    <div style={ congrats_box  } className=\"rounded-lg d-flex\">\n        <img src={ code_background } alt=\"code \" style={ imageSize } />\n        <button onClick={ startQuiz  } className=\"btn rounded-pill\" style = { buttonColour } >Start Quiz</button>\n    </div>\n);\n\n\nexport default Start;","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Start from \"./Start\";\nimport { startQuiz } from \"../../data/actions/api\";\n\n// let mapStateToProps = (state) => {\n//     return {\n   \n//     }\n// };\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        startQuiz: () => dispatch(startQuiz())\n    }\n};\n \nexport default connect(null, mapDispatchToProps)(Start);","import React from 'react';\nimport '../../App.css';\nimport Quiz from'../Quiz';\nimport Start from '../Start';\n\n\n\nfunction App( {start} ) {\n  return (\n    <>\n      { start ? <Quiz /> : <Start /> }\n      {/* { qcounter > 20 ? <Complete/> : <Quiz /> } } */}\n    </>\n  );\n}\n\nexport default App;\n","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport App from \"./App\";\n\n\nlet mapStateToProps = ( {start} ) => ( {start} )\n// destructuring state object start property and saving it to a variable of the same name (start)\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const start = (state, { values }) => ({\n    ...state,\n    quiz: values,\n});\n\nconst save = (state, { question, answers }) => ({\n    ...state, \n    current: {\n        ...state.current,\n        question: question,\n        answers: answers,\n    },\n    qcounter: state.qcounter + 1,\n    selected: 0,\n    correctAnswer: null,\n    start: true,\n    timeout: false,\n});\n\n// const next = state => ({\n//     ...state,\n//     qcounter: state.qcounter + 1,\n// });\n\n\nconst selectedAnswer = (state, { id }) => ({\n    ...state,\n    selected: id,\n});\n\nconst correctAnswer = state => ({\n    ...state,\n    correctAnswer: state.current.answers.find(answer =>\n        answer.correct).id\n});\n\nconst incrementScore = state => ({\n    ...state,\n    score: state.correctAnswer === state.selected ? state.score + 1 : state.score,\n});\n\nconst timesUp = state => ({\n    ...state,\n    timeout: true,\n    selected: true,\n});\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"start\": return start(state, action);\n        // case \"next\": return next(state, action);\n        case \"save\": return save(state, action);\n        case \"selectedAnswer\": return incrementScore(correctAnswer(selectedAnswer(state, action)));\n        case \"timesUp\": return timesUp(state);\n        default: return state;\n    }\n};\n\nexport default reducer;","const initial = {\n    qcounter:0,\n    quiz: [],\n    current: '',\n    selected: 0,\n    start: false,\n    score: 0,\n    correctAnswer: null,\n    timeout: false,\n};\n\nexport default initial;","import reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\n\nconst composeEnhancers =\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; \n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from'./data/store';\n\n\n\nReactDOM.render(\n\n    <Provider store={ store }>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}